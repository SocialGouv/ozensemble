/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif
#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeRNSentry {
    struct SpecCaptureEnvelopeOptions {
      bool store() const;

      SpecCaptureEnvelopeOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeRNSentry_SpecCaptureEnvelopeOptions)
+ (RCTManagedPointer *)JS_NativeRNSentry_SpecCaptureEnvelopeOptions:(id)json;
@end
@protocol NativeRNSentrySpec <RCTBridgeModule, RCTTurboModule>

- (void)addListener:(NSString *)eventType;
- (void)removeListeners:(double)id;
- (void)addBreadcrumb:(NSDictionary *)breadcrumb;
- (void)captureEnvelope:(NSString *)bytes
                options:(JS::NativeRNSentry::SpecCaptureEnvelopeOptions &)options
                resolve:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject;
- (void)captureScreenshot:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)clearBreadcrumbs;
- (void)crash;
- (void)closeNativeSdk:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)disableNativeFramesTracking;
- (void)fetchNativeRelease:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)fetchNativeSdkInfo:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)fetchNativeDeviceContexts:(RCTPromiseResolveBlock)resolve
                           reject:(RCTPromiseRejectBlock)reject;
- (void)fetchNativeAppStart:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)fetchNativeFrames:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)initNativeSdk:(NSDictionary *)options
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)setUser:(NSDictionary * _Nullable)defaultUserKeys
  otherUserKeys:(NSDictionary * _Nullable)otherUserKeys;
- (void)setContext:(NSString *)key
             value:(NSDictionary * _Nullable)value;
- (void)setExtra:(NSString *)key
           value:(NSString *)value;
- (void)setTag:(NSString *)key
         value:(NSString *)value;
- (void)enableNativeFramesTracking;
- (void)fetchModules:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)fetchViewHierarchy:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (NSDictionary *)startProfiling;
- (NSDictionary *)stopProfiling;
- (NSString * _Nullable)fetchNativePackageName;
- (NSDictionary * _Nullable)fetchNativeStackFramesBy:(NSArray *)instructionsAddr;
- (void)initNativeReactNavigationNewFrameTracking:(RCTPromiseResolveBlock)resolve
                                           reject:(RCTPromiseRejectBlock)reject;

@end
namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeRNSentry'
   */
  class JSI_EXPORT NativeRNSentrySpecJSI : public ObjCTurboModule {
  public:
    NativeRNSentrySpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline bool JS::NativeRNSentry::SpecCaptureEnvelopeOptions::store() const
{
  id const p = _v[@"store"];
  return RCTBridgingToBool(p);
}
