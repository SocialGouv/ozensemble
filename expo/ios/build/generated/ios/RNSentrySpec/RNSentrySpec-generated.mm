/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNSentrySpec.h"

@implementation RCTCxxConvert (NativeRNSentry_SpecCaptureEnvelopeOptions)
+ (RCTManagedPointer *)JS_NativeRNSentry_SpecCaptureEnvelopeOptions:(id)json
{
  return facebook::react::managedPointer<JS::NativeRNSentry::SpecCaptureEnvelopeOptions>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "addListener", @selector(addListener:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeListeners", @selector(removeListeners:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_addBreadcrumb(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "addBreadcrumb", @selector(addBreadcrumb:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_captureEnvelope(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "captureEnvelope", @selector(captureEnvelope:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_captureScreenshot(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "captureScreenshot", @selector(captureScreenshot:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_clearBreadcrumbs(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "clearBreadcrumbs", @selector(clearBreadcrumbs), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_crash(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "crash", @selector(crash), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_closeNativeSdk(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "closeNativeSdk", @selector(closeNativeSdk:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_disableNativeFramesTracking(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "disableNativeFramesTracking", @selector(disableNativeFramesTracking), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeRelease(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "fetchNativeRelease", @selector(fetchNativeRelease:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeSdkInfo(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "fetchNativeSdkInfo", @selector(fetchNativeSdkInfo:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeDeviceContexts(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "fetchNativeDeviceContexts", @selector(fetchNativeDeviceContexts:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeAppStart(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "fetchNativeAppStart", @selector(fetchNativeAppStart:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeFrames(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "fetchNativeFrames", @selector(fetchNativeFrames:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_initNativeSdk(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "initNativeSdk", @selector(initNativeSdk:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setUser(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setUser", @selector(setUser:otherUserKeys:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setContext(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setContext", @selector(setContext:value:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setExtra(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setExtra", @selector(setExtra:value:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setTag", @selector(setTag:value:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_enableNativeFramesTracking(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "enableNativeFramesTracking", @selector(enableNativeFramesTracking), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchModules(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "fetchModules", @selector(fetchModules:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchViewHierarchy(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "fetchViewHierarchy", @selector(fetchViewHierarchy:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_startProfiling(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "startProfiling", @selector(startProfiling), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_stopProfiling(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "stopProfiling", @selector(stopProfiling), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativePackageName(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, "fetchNativePackageName", @selector(fetchNativePackageName), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeStackFramesBy(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "fetchNativeStackFramesBy", @selector(fetchNativeStackFramesBy:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_initNativeReactNavigationNewFrameTracking(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "initNativeReactNavigationNewFrameTracking", @selector(initNativeReactNavigationNewFrameTracking:reject:), args, count);
    }

  NativeRNSentrySpecJSI::NativeRNSentrySpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_addListener};
        
        
        methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_removeListeners};
        
        
        methodMap_["addBreadcrumb"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_addBreadcrumb};
        
        
        methodMap_["captureEnvelope"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_captureEnvelope};
        setMethodArgConversionSelector(@"captureEnvelope", 1, @"JS_NativeRNSentry_SpecCaptureEnvelopeOptions:");
        
        methodMap_["captureScreenshot"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_captureScreenshot};
        
        
        methodMap_["clearBreadcrumbs"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_clearBreadcrumbs};
        
        
        methodMap_["crash"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_crash};
        
        
        methodMap_["closeNativeSdk"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_closeNativeSdk};
        
        
        methodMap_["disableNativeFramesTracking"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_disableNativeFramesTracking};
        
        
        methodMap_["fetchNativeRelease"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeRelease};
        
        
        methodMap_["fetchNativeSdkInfo"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeSdkInfo};
        
        
        methodMap_["fetchNativeDeviceContexts"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeDeviceContexts};
        
        
        methodMap_["fetchNativeAppStart"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeAppStart};
        
        
        methodMap_["fetchNativeFrames"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeFrames};
        
        
        methodMap_["initNativeSdk"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_initNativeSdk};
        
        
        methodMap_["setUser"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_setUser};
        
        
        methodMap_["setContext"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_setContext};
        
        
        methodMap_["setExtra"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_setExtra};
        
        
        methodMap_["setTag"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_setTag};
        
        
        methodMap_["enableNativeFramesTracking"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_enableNativeFramesTracking};
        
        
        methodMap_["fetchModules"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchModules};
        
        
        methodMap_["fetchViewHierarchy"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchViewHierarchy};
        
        
        methodMap_["startProfiling"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_startProfiling};
        
        
        methodMap_["stopProfiling"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_stopProfiling};
        
        
        methodMap_["fetchNativePackageName"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativePackageName};
        
        
        methodMap_["fetchNativeStackFramesBy"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_fetchNativeStackFramesBy};
        
        
        methodMap_["initNativeReactNavigationNewFrameTracking"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_initNativeReactNavigationNewFrameTracking};
        
  }
} // namespace facebook::react
