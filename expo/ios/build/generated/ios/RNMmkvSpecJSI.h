/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


#pragma mark - MmkvCxxMode

enum class MmkvCxxMode { SINGLE_PROCESS, MULTI_PROCESS };

template <>
struct Bridging<MmkvCxxMode> {
  static MmkvCxxMode fromJs(jsi::Runtime &rt, const jsi::String &rawValue) {
    std::string value = rawValue.utf8(rt);
    if (value == "SINGLE_PROCESS") {
      return MmkvCxxMode::SINGLE_PROCESS;
    } else if (value == "MULTI_PROCESS") {
      return MmkvCxxMode::MULTI_PROCESS;
    } else {
      throw jsi::JSError(rt, "No appropriate enum member found for value");
    }
  }

  static jsi::String toJs(jsi::Runtime &rt, MmkvCxxMode value) {
    if (value == MmkvCxxMode::SINGLE_PROCESS) {
      return bridging::toJs(rt, "SINGLE_PROCESS");
    } else if (value == MmkvCxxMode::MULTI_PROCESS) {
      return bridging::toJs(rt, "MULTI_PROCESS");
    } else {
      throw jsi::JSError(rt, "No appropriate enum member found for enum value");
    }
  }
};
  
#pragma mark - MmkvCxxBaseConfiguration

template <typename P0, typename P1, typename P2, typename P3>
struct [[deprecated("Use MmkvCxxConfiguration instead.")]] MmkvCxxBaseConfiguration {
  P0 id;
  P1 path;
  P2 encryptionKey;
  P3 mode;
  bool operator==(const MmkvCxxBaseConfiguration &other) const {
    return id == other.id && path == other.path && encryptionKey == other.encryptionKey && mode == other.mode;
  }
};

template <typename P0, typename P1, typename P2, typename P3>
struct [[deprecated("Use MmkvCxxConfigurationBridging instead.")]] MmkvCxxBaseConfigurationBridging {
  static MmkvCxxBaseConfiguration<P0, P1, P2, P3> fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    MmkvCxxBaseConfiguration<P0, P1, P2, P3> result{
      bridging::fromJs<P0>(rt, value.getProperty(rt, "id"), jsInvoker),
      bridging::fromJs<P1>(rt, value.getProperty(rt, "path"), jsInvoker),
      bridging::fromJs<P2>(rt, value.getProperty(rt, "encryptionKey"), jsInvoker),
      bridging::fromJs<P3>(rt, value.getProperty(rt, "mode"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String idToJs(jsi::Runtime &rt, P0 value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String pathToJs(jsi::Runtime &rt, P1 value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String encryptionKeyToJs(jsi::Runtime &rt, P2 value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String modeToJs(jsi::Runtime &rt, P3 value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const MmkvCxxBaseConfiguration<P0, P1, P2, P3> &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "id", bridging::toJs(rt, value.id, jsInvoker));
    if (value.path) {
      result.setProperty(rt, "path", bridging::toJs(rt, value.path.value(), jsInvoker));
    }
    if (value.encryptionKey) {
      result.setProperty(rt, "encryptionKey", bridging::toJs(rt, value.encryptionKey.value(), jsInvoker));
    }
    if (value.mode) {
      result.setProperty(rt, "mode", bridging::toJs(rt, value.mode.value(), jsInvoker));
    }
    return result;
  }
};


#pragma mark - MmkvCxxConfiguration

template <typename P0, typename P1, typename P2, typename P3>
struct MmkvCxxConfiguration {
  P0 id;
  P1 path;
  P2 encryptionKey;
  P3 mode;
  bool operator==(const MmkvCxxConfiguration &other) const {
    return id == other.id && path == other.path && encryptionKey == other.encryptionKey && mode == other.mode;
  }
};

template <typename T>
struct MmkvCxxConfigurationBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.id)>(rt, value.getProperty(rt, "id"), jsInvoker),
      bridging::fromJs<decltype(types.path)>(rt, value.getProperty(rt, "path"), jsInvoker),
      bridging::fromJs<decltype(types.encryptionKey)>(rt, value.getProperty(rt, "encryptionKey"), jsInvoker),
      bridging::fromJs<decltype(types.mode)>(rt, value.getProperty(rt, "mode"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String idToJs(jsi::Runtime &rt, decltype(types.id) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String pathToJs(jsi::Runtime &rt, decltype(types.path) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String encryptionKeyToJs(jsi::Runtime &rt, decltype(types.encryptionKey) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String modeToJs(jsi::Runtime &rt, decltype(types.mode) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "id", bridging::toJs(rt, value.id, jsInvoker));
    if (value.path) {
      result.setProperty(rt, "path", bridging::toJs(rt, value.path.value(), jsInvoker));
    }
    if (value.encryptionKey) {
      result.setProperty(rt, "encryptionKey", bridging::toJs(rt, value.encryptionKey.value(), jsInvoker));
    }
    if (value.mode) {
      result.setProperty(rt, "mode", bridging::toJs(rt, value.mode.value(), jsInvoker));
    }
    return result;
  }
};

class JSI_EXPORT NativeMmkvCxxSpecJSI : public TurboModule {
protected:
  NativeMmkvCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual bool initialize(jsi::Runtime &rt, jsi::String basePath) = 0;
  virtual jsi::Object createMMKV(jsi::Runtime &rt, jsi::Object configuration) = 0;

};

template <typename T>
class JSI_EXPORT NativeMmkvCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "MmkvCxx";

protected:
  NativeMmkvCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeMmkvCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeMmkvCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeMmkvCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    bool initialize(jsi::Runtime &rt, jsi::String basePath) override {
      static_assert(
          bridging::getParameterCount(&T::initialize) == 2,
          "Expected initialize(...) to have 2 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::initialize, jsInvoker_, instance_, std::move(basePath));
    }
    jsi::Object createMMKV(jsi::Runtime &rt, jsi::Object configuration) override {
      static_assert(
          bridging::getParameterCount(&T::createMMKV) == 2,
          "Expected createMMKV(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::createMMKV, jsInvoker_, instance_, std::move(configuration));
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};


  class JSI_EXPORT NativeMmkvPlatformContextCxxSpecJSI : public TurboModule {
protected:
  NativeMmkvPlatformContextCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::String getBaseDirectory(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeMmkvPlatformContextCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "MmkvPlatformContext";

protected:
  NativeMmkvPlatformContextCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeMmkvPlatformContextCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeMmkvPlatformContextCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeMmkvPlatformContextCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::String getBaseDirectory(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getBaseDirectory) == 1,
          "Expected getBaseDirectory(...) to have 1 parameters");

      return bridging::callFromJs<jsi::String>(
          rt, &T::getBaseDirectory, jsInvoker_, instance_);
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
