// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary" // https://github.com/prisma/prisma/issues/10649
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                 @id @default(uuid())
  matomo_id                String                 @unique
  push_notif_token         String                 @default("")
  reminder                 Reminder?
  notifications            Notification[]
  badges                   Badge[]
  consommations            Consommation[]
  drinksContext            DrinksContext[]
  goals                    Goal[]
  goal_isSetup             Boolean                @default(false)
  goal_daysWithGoalNoDrink String[]               @default([])
  goal_dosesByDrinkingDay  Float?
  goal_dosesPerWeek        Float?
  appUserMilestones        AppMilestone[]
  articles                 Article[]
  lastConsoAdded           DateTime?
  created_from             String                 @default("")
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @default(now()) @updatedAt
  drinksContextRequests    DrinksContextRequest[]
  appVersion               String?

  @@index([push_notif_token], type: Hash)
}

model Notification {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  type      String
  date      DateTime
  status    NotificationStatus @default(NotSent)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([id], type: BTree)
}

enum NotificationStatus {
  NotSent
  Sent
  Canceled
  Failed
}

model Reminder {
  id             String                 @id @default(uuid())
  user           User                   @relation(fields: [userId], references: [id])
  userId         String                 @unique
  type           ReminderType           @default(Daily)
  utcDaysOfWeek  ReminderUtcDaysOfWeek?
  utcTimeHours   Int                    @default(0)
  utcTimeMinutes Int                    @default(0)
  disabled       Boolean                @default(false)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@index([type], type: Hash)
  @@index([type, id], type: BTree)
  @@index([utcTimeHours, utcTimeMinutes], type: BTree)
}

enum ReminderType {
  Daily
  Weekdays
}

model ReminderUtcDaysOfWeek {
  id         String   @id @default(uuid())
  reminder   Reminder @relation(fields: [reminderId], references: [id])
  reminderId String   @unique
  sunday     Boolean  @default(false)
  monday     Boolean  @default(false)
  tuesday    Boolean  @default(false)
  wednesday  Boolean  @default(false)
  thursday   Boolean  @default(false)
  friday     Boolean  @default(false)
  saturday   Boolean  @default(false)

  @@index([sunday], type: Hash)
  @@index([monday], type: Hash)
  @@index([tuesday], type: Hash)
  @@index([wednesday], type: Hash)
  @@index([thursday], type: Hash)
  @@index([friday], type: Hash)
  @@index([saturday], type: Hash)
}

model Badge {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  category  String
  stars     Int
  date      String   @default("")
  shown     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, category, stars])
  @@index([userId], type: Hash)
}

model Consommation {
  id        String   @id @default(uuid())
  drinkKey  String
  name      String   @default("")
  quantity  Float    @default(1)
  doses     Float    @default(1)
  kcal      Float    @default(1)
  price     Float    @default(1)
  volume    String   @default("")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], type: Hash)
}

model DrinksContext {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime @default(now())
  context   String[] @default([])
  emotion   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], type: Hash)
}

enum GoalStatus {
  Success
  Failure
  InProgress
}

model Goal {
  id                  String     @id
  daysWithGoalNoDrink String[]   @default([])
  dosesByDrinkingDay  Float      @default(0)
  dosesPerWeek        Float      @default(0)
  user                User       @relation(fields: [userId], references: [id])
  userId              String
  date                String     @default("") // start of week YYYY-MM-DD
  status              GoalStatus @default(InProgress)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([id], type: Hash)
  @@index([userId, date], type: BTree)
}

model AppMilestone {
  id        String   @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id], type: Hash)
}

model Article {
  id        String   @id @default(uuid())
  title     String   @default("")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, title])
}

model DrinksContextRequest {
  id        String   @id @default(uuid())
  matomo_id String
  userId    String
  category  String
  context   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([category], type: Hash)
  @@index([context], type: Hash)
}
